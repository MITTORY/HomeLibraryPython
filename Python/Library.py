import sqlite3
import os
import csv
from docx import Document
import pandas as pd
        
class Library:
    def __init__(self):
        self.conn = sqlite3.connect('library.db')
        self.cursor = self.conn.cursor()

    def add_book(self, title, author, genre, year, book_type, description):
        self.cursor.execute(''' 
            INSERT INTO books (title, author, genre, year, type, description)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (title, author, genre, year, book_type, description))
        self.conn.commit()
        print(f'\n‚úÖ {book_type.capitalize()} "{title}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')

    def remove_book(self, book_id):
        self.cursor.execute('SELECT * FROM books WHERE id = ?', (book_id,))
        book = self.cursor.fetchone()
        if book:
            self.cursor.execute('DELETE FROM books WHERE id = ?', (book_id,))
            self.conn.commit()
            print(f'\n‚úÖ –ö–Ω–∏–≥–∞/–∫–æ–º–∏–∫—Å/–º–∞–Ω–≥–∞ —Å ID {book_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
        else:
            print(f'\n‚ùå –ö–Ω–∏–≥–∞/–∫–æ–º–∏–∫—Å/–º–∞–Ω–≥–∞ —Å ID {book_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

    def edit_book(self, book_id, field, new_value):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–º
        if field not in ["title", "author", "genre", "year", "type", "description"]:
            print("üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        self.cursor.execute(f'UPDATE books SET {field} = ? WHERE id = ?', (new_value, book_id))
        self.conn.commit()
        print(f'\n‚úÖ –ö–Ω–∏–≥–∞/–∫–æ–º–∏–∫—Å/–º–∞–Ω–≥–∞ —Å ID {book_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')

    def display_books(self):
        self.cursor.execute('SELECT * FROM books')
        books = self.cursor.fetchall()
        book_count = len(books)
        if not books:
            print("\nüìö –í–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞.")
            return
        print(f"\nüìö –í–∞—à–∞ –¥–æ–º–∞—à–Ω—è—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ ({book_count}): ")
        print("-" * 80)
        for book in books:
            print(f'   üìñ "{book[1]}"')
            print(f'   –ê–≤—Ç–æ—Ä: {book[2]} | –ñ–∞–Ω—Ä: {book[3]} | –ì–æ–¥: {book[4]} | –¢–∏–ø: {book[5]}')
            print(f'   –û–ø–∏—Å–∞–Ω–∏–µ: {book[6] if book[6] else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}')
            print("-" * 80)
    
    def display_books_without_description(self):
        self.cursor.execute('SELECT * FROM books')
        books = self.cursor.fetchall()
        book_count = len(books)
        if not books:
            print("\nüìö –í–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞.")
            return
        print(f"\nüìö –í–∞—à–∞ –¥–æ–º–∞—à–Ω—è—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ ({book_count}): ")
        print("-" * 80)
        for book in books:
            print(f'   üìñ "{book[1]}"')
            print(f'   –ê–≤—Ç–æ—Ä: {book[2]} | –ñ–∞–Ω—Ä: {book[3]} | –ì–æ–¥: {book[4]} | –¢–∏–ø: {book[5]}')
            print("-" * 80)


    def save_to_txt(self):
        with open('library.txt', 'w', encoding='utf-8') as f:
            f.write("üìö –í–∞—à–∞ –¥–æ–º–∞—à–Ω—è—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:\n")
            f.write("-" * 80 + "\n")
            self.cursor.execute('SELECT * FROM books')
            books = self.cursor.fetchall()
            for i, book in enumerate(books, start=1):
                f.write(f'{i}. üìñ "{book[1]}"\n')
                f.write(f'   –ê–≤—Ç–æ—Ä: {book[2]} | –ñ–∞–Ω—Ä: {book[3]} | –ì–æ–¥: {book[4]} | –¢–∏–ø: {book[5]}\n')
                f.write(f'   –û–ø–∏—Å–∞–Ω–∏–µ: {book[6] if book[6] else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}\n')
                f.write("-" * 80 + "\n")
        print("‚úÖüìÑ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª library.txt.")

    def save_to_word(self):
        document = Document()
        document.add_heading('üìö –í–∞—à–∞ –¥–æ–º–∞—à–Ω—è—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:', level=1)
        self.cursor.execute('SELECT * FROM books')
        books = self.cursor.fetchall()
        for i, book in enumerate(books, start=1):
            document.add_paragraph(f'{i}. üìñ "{book[1]}"')
            document.add_paragraph(f'   –ê–≤—Ç–æ—Ä: {book[2]} | –ñ–∞–Ω—Ä: {book[3]} | –ì–æ–¥: {book[4]} | –¢–∏–ø: {book[5]}')
            document.add_paragraph(f'   –û–ø–∏—Å–∞–Ω–∏–µ: {book[6] if book[6] else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}')
            document.add_paragraph("-" * 80)
        document.save('library.docx')
        print("‚úÖüìÑ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª library.docx.")

    def save_to_excel(self):
        books = self.cursor.execute('SELECT * FROM books').fetchall()
        df = pd.DataFrame(books, columns=['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ê–≤—Ç–æ—Ä', '–ñ–∞–Ω—Ä', '–ì–æ–¥', '–¢–∏–ø', '–û–ø–∏—Å–∞–Ω–∏–µ'])
        df.to_excel('library.xlsx', index=False)
        print("‚úÖüìÑ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª library.xlsx.")

    def save_to_html(self):
        self.cursor.execute('SELECT * FROM books')
        books = self.cursor.fetchall()
        with open('library.html', 'w', encoding='utf-8') as f:
            f.write('<html><head><title>–í–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞</title></head><body>')
            f.write('<h1>üìö –í–∞—à–∞ –¥–æ–º–∞—à–Ω—è—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:</h1>')
            f.write('<table border="1"><tr><th>‚Ññ</th><th>–ù–∞–∑–≤–∞–Ω–∏–µ</th><th>–ê–≤—Ç–æ—Ä</th><th>–ñ–∞–Ω—Ä</th><th>–ì–æ–¥</th><th>–¢–∏–ø</th><th>–û–ø–∏—Å–∞–Ω–∏–µ</th></tr>')
            for i, book in enumerate(books, start=1):
                f.write(f'<tr><td>{i}</td><td>{book[1]}</td><td>{book[2]}</td><td>{book[3]}</td><td>{book[4]}</td><td>{book[5]}</td><td>{book[6] if book[6] else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}</td></tr>')
            f.write('</table></body></html>')
        print("‚úÖüìÑ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª library.html.")

    def search_books(self, search_type, search_value):
        if search_type == "title":
            self.cursor.execute('SELECT * FROM books WHERE title LIKE ? ORDER BY title ASC', (f'%{search_value}%',))
        elif search_type == "author":
            self.cursor.execute('SELECT * FROM books WHERE author LIKE ? ORDER BY author ASC', (f'%{search_value}%',))
        elif search_type == "year":
            # –ß—Ç–æ–±—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥–∏ –ø–æ –≥–æ–¥—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            self.cursor.execute('SELECT * FROM books WHERE year = ? ORDER BY year ASC', (search_value,))
        elif search_type == "type":
            self.cursor.execute('SELECT * FROM books WHERE type LIKE ? ORDER BY type ASC', (f'%{search_value}%',))
        elif search_type == "genre":
            self.cursor.execute('SELECT * FROM books WHERE genre LIKE ? ORDER BY genre ASC', (f'%{search_value}%',))
        else:
            print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞.")
            return
    
        books = self.cursor.fetchall()
        if not books:
            print("\n‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
    
        print("\nüìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
        print("-" * 60)
        for i, book in enumerate(books, start=1):
            print(f'{i}. üìñ "{book[1]}"')
            print(f'   –ê–≤—Ç–æ—Ä: {book[2]} | –ñ–∞–Ω—Ä: {book[3]} | –ì–æ–¥: {book[4]} | –¢–∏–ø: {book[5]}')
            print("-" * 60)


    def get_unique_values(self, column):
        self.cursor.execute(f'SELECT DISTINCT {column} FROM books')
        return [row[0] for row in self.cursor.fetchall()]

    def display_search_options(self, column):
        self.cursor.execute(f'SELECT DISTINCT {column} FROM books ORDER BY {column} ASC')
        values = [row[0] for row in self.cursor.fetchall()]
        print(f"\n–î–æ—Å—Ç—É–ø–Ω–æ:")
        for value in values:
            print(f"- {value}")


    def import_books(self, filename):
        with open(filename, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)
            for row in reader:
                self.add_book(row[0], row[1], row[2], int(row[3]), row[4])

    def export_books(self):
        with open('exported_books.csv', 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ê–≤—Ç–æ—Ä', '–ñ–∞–Ω—Ä', '–ì–æ–¥', '–¢–∏–ø'])
            self.cursor.execute('SELECT * FROM books')
            books = self.cursor.fetchall()
            for book in books:
                writer.writerow([book[1], book[2], book[3], book[4], book[5]])
        print("üì§ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ñ–∞–π–ª exported_books.csv.")

    def menu(self):
        while True:
            print("\n" + "=" * 40)
            print("üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É! üìö")
            print("=" * 40)
            print("1. üîç –ü–æ–∏—Å–∫")
            print("2. üìú –ü–æ–∫–∞–∑–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É (—Å –æ–ø–∏—Å–∞–Ω–∏–µ–º)")
            print("3. üìú –ü–æ–∫–∞–∑–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É (–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)")
            print("4. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É/–∫–æ–º–∏–∫—Å/–º–∞–Ω–≥—É")
            print("5. ‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É/–∫–æ–º–∏–∫—Å/–º–∞–Ω–≥—É")
            print("6. ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É/–∫–æ–º–∏–∫—Å/–º–∞–Ω–≥—É")
            print("7. üì• –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
            print("8. üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
            print("9. üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É")
            print("0. üö™ –ü–æ–∫–∏–Ω—É—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É")
            print("=" * 40)

            choice = input("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-9): ")
            if choice == "1":
                print("\nüîç –ü–æ–∏—Å–∫ –ø–æ:")
                print("1. –ù–∞–∑–≤–∞–Ω–∏—é")
                print("2. –ê–≤—Ç–æ—Ä—É")
                print("3. –ñ–∞–Ω—Ä—É")
                print("4. –ì–æ–¥—É")
                print("5. –¢–∏–ø—É")
                search_choice = input("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-5): ")
                if search_choice == "1":
                    search_value = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ")
                    self.search_books("title", search_value)
                elif search_choice == "2":
                    self.display_search_options("author")
                    search_value = input("–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞: ")
                    self.search_books("author", search_value)
                elif search_choice == "3":
                    self.display_search_options("genre")
                    search_value = input("–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä: ")
                    self.search_books("genre", search_value)
                elif search_choice == "4":
                    self.display_search_options("year")
                    search_value = input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥: ")
                    self.search_books("year", search_value)
                elif search_choice == "5":
                    self.display_search_options("type")
                    search_value = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø: ")
                    self.search_books("type", search_value)
                else:
                    print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")

            elif choice == "2":
                self.display_books()
                
            elif choice == "3":
                self.display_books_without_description()

            elif choice == "4":
                title = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ")
                author = input("–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞: ")
                genre = input("–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä: ")
                year = int(input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥: "))
                book_type = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø (–∫–Ω–∏–≥–∞/–∫–æ–º–∏–∫—Å/–º–∞–Ω–≥–∞): ")
                description = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ")
                self.add_book(title, author, genre, year, book_type, description)

            elif choice == "5":
                try:
                    book_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏/–∫–æ–º–∏–∫—Å–∞/–º–∞–Ω–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
                    self.remove_book(book_id)
                except ValueError:
                    print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

            elif choice == "6":
                book_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏/–∫–æ–º–∏–∫—Å–∞/–º–∞–Ω–≥–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "))
                print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                print("1. –ù–∞–∑–≤–∞–Ω–∏–µ")
                print("2. –ê–≤—Ç–æ—Ä")
                print("3. –ñ–∞–Ω—Ä")
                print("4. –ì–æ–¥")
                print("5. –¢–∏–ø")
                print("6. –û–ø–∏—Å–∞–Ω–∏–µ")
                field_choice = input("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ (1-6): ")
                fields = ["title", "author", "genre", "year", "type", "description"]
            
                if field_choice in [str(i + 1) for i in range(len(fields))]:
                    field = fields[int(field_choice) - 1]
                    new_value = input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}: ")
                    if field == "year":
                        new_value = int(new_value)
                    self.edit_book(book_id, field, new_value)
                else:
                    print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")

            elif choice == "7":
                filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, books.csv): ")
                self.import_books(filename)

            elif choice == "8":
                self.export_books()

            elif choice == "9":
                print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
                print("1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ TXT")
                print("2. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Word")
                print("3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel")
                print("4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ HTML")
                print("5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã")
                format_choice = input("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-5): ")
    
                if format_choice == "1":
                    self.save_to_txt()
                elif format_choice == "2":
                    self.save_to_word()
                elif format_choice == "3":
                    self.save_to_excel()
                elif format_choice == "4":
                    self.save_to_html()
                elif format_choice == "5":
                    self.save_to_txt()
                    self.save_to_word()
                    self.save_to_excel()
                    self.save_to_html()
                else:
                    print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")
                    
            elif choice == "0":
                print("üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break

            else:
                print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")
    
if __name__ == "__main__":
    library = Library()
    library.menu()
